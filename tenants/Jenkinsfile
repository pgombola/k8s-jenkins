import groovy.json.JsonOutput

pipeline {
    agent any
    parameters {
        string(name: 'Tenant Name', defaultValue: '', description: 'Name of tenant to create')
        choice(name: 'Region', choices: ['us-east-1', 'us-west-2'], description: 'Region to deploy tenant')
        choice(name: 'Environment', choices: ['prod', 'stage'], description: 'Environment to deploy tenant')
    }

    stages {
        stage("Validate parameters") {
            steps {
                script {
                    if (params['Tenant Name'] == '') {
                        error 'Invalid tenant name'
                    }
                }
            }
        }

        stage("Create tenant branch") {
            steps {
                withCredentials([usernamePassword(
                    credentialsId: 'pgombola-token',
                    usernameVariable: 'USERNAME',
                    passwordVariable: 'PASSWORD',)]) {
                    script {
                        def tenantBranch = 'tenant-'+params['Tenant Name']
                        echo "Creating branch ${tenantBranch}"

                        def createJson = JsonOutput.toJson([ref: "refs/heads/${tenantBranch}", sha: "${GIT_COMMIT}"]).replace("\"", "\\\"")
                        sh "curl -s -o - -s -w \"\n%{http_code}\n\" -X POST -i -d ${createJson} https://api.github.com/repos/pgombola/k8s-jenkins/git/refs -u $USERNAME:$PASSWORD | tail -1 > createResult.txt"
                        def createResult = readFile('createResult.txt').trim()
                        echo "Create Result: ${createResult}"
                        if (createResult.equals('201')) {
                            echo "Created branch ${tenantBranch}"
                        } else {
                            error 'Error creating branch'
                        }
                    }
                }
            }
        }
        stage("Configure tenant") {
            steps {
                echo 'configuring...'
            }
        }
        stage("Create PR") {
            steps {
                echo 'creating pr...'
            }
        }
        // stage ("Merge pull request") {
        //     steps {
        //         withCredentials([usernamePassword(
        //             credentialsId: 'pgombola-token',
        //             usernameVariable: 'USERNAME',
        //             passwordVariable: 'PASSWORD',)]) {
        //             script {
        //                 sh "curl -s -o - -s -w \"\n%{http_code}\n\" -X PUT -i -d '{\"commit_title\": \"Merge add tenant\"}' https://api.github.com/repos/pgombola/k8s-jenkins/pulls/$CHANGE_ID/merge -u $USERNAME:$PASSWORD | tail -1 > mergeResult.txt"
        //                 def mergeResult = readFile('mergeResult.txt').trim()
        //                 echo "Merge Result: ${mergeResult}"
        //                 if (mergeResult != "200") {
        //                     error "Unable to merge!"
        //                 } else {
        //                 // Send a Slack message, etc
        //                 }
        //             }
        //         }
        //     }
        // }
    }
}