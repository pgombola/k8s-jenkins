import groovy.json.JsonOutput

PR_ID=null

pipeline {
    agent any
    options {
        buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
    }
    parameters {
        string(name: 'Tenant Name', defaultValue: '', description: 'Name of tenant to create')
        choice(name: 'Region', choices: ['us-east-1', 'us-west-2'], description: 'Region to deploy tenant')
        choice(name: 'Environment', choices: ['prod', 'stage'], description: 'Environment to deploy tenant')
    }
    environment {
        GIT_CREDENTIAL_ID = 'pgombola-token'
        GIT_OWNER = "pgombola"
        GIT_REPO = "k8s-jenkins"

        GIT_URL_WITHOUT_HTTPS = "${GIT_URL}".substring("${GIT_URL}".indexOf('https://')+8)
        GITHUB_API_URL = "https://api.github.com/repos/${GIT_OWNER}/${GIT_REPO}"
        TENANT = "${params['Tenant Name']}"
        TENANT_BRANCH = "tenant-${TENANT}"
    }

    stages {
        stage("Validate parameters") {
            steps {
                script {
                    if (params['Tenant Name'] == '') {
                        error 'Invalid tenant name'
                    }
                }
            }
        }
        stage("Create tenant branch") {
            steps {
                withCredentials([usernamePassword(
                    credentialsId: env.GIT_CREDENTIAL_ID,
                    usernameVariable: 'USER',
                    passwordVariable: 'PASS',)]) {
                    script {
                        def tenantBranch = 'tenant-'+params['Tenant Name']
                        echo "Creating branch ${tenantBranch}"
                        def create = JsonOutput.toJson([ref: "refs/heads/${tenantBranch}", sha: "${GIT_COMMIT}"]).replace("\"", "\\\"")
                        echo "${create}"
                        resp = sh (
                            script: "curl -s -o - -i -w \"%{http_code}\" -X POST -d ${create} ${GITHUB_API_URL}/git/refs -u $USER:$PASS | tail -1",
                            returnStdout: true
                        ).trim()
                        if (resp == '201') {
                            echo 'Branch created.'
                        } else {
                            echo '*** Remove existing branch and provision again ***'
                            echo '*** This run may have removed in post cleanup  ***'
                            error "Unable to create branch! Status code: ${resp}"
                        }
                    }
                }
            }
        }
        stage("Configure tenant") {
            steps {
                script {
                    def tenant = params['Tenant Name']
                    echo "Configuring ${tenant}..."
                    withCredentials([usernamePassword(
                        credentialsId: env.GIT_CREDENTIAL_ID,
                        usernameVariable: 'USER',
                        passwordVariable: 'PASS')]) {
                        script {
                            env.encodedPass=URLEncoder.encode(PASS, "UTF-8")
                            DIR = "tenant-${tenant}"
                            sh "git clone https://${USER}:${encodedPass}@${GIT_URL_WITHOUT_HTTPS} ${DIR} -b tenant-${tenant}"
                            dir("${DIR}") {
                                // Create tenant may need to be called in the case of updating a tenant.
                                // This script should be able to handle updates to existing tenant configs.
                                sh "./create-tenant.sh ${tenant}"
                                sh 'git add .'
                                sh "git commit -m \"Added tenant ${tenant}\""
                                sh 'git push'
                            }
                        }
                    }
                }
            }
        }
        stage("Approval") {
            steps {
                echo "creating pr for branch ${TENANT_BRANCH}..."
                withCredentials([usernamePassword(
                    credentialsId: env.GIT_CREDENTIAL_ID,
                    usernameVariable: 'USER',
                    passwordVariable: 'PASS',)]) {
                    script {
                        def create = JsonOutput.toJson([title: "Configure-${TENANT}", head: "${TENANT_BRANCH}", base: "master"]).replace("\"", "\\\"")
                        resp = sh (
                            script: "curl -s -o - -X POST -d ${create} ${GITHUB_API_URL}/pulls -u $USER:$PASS",
                            returnStdout: true
                        ).trim()
                        respObj = readJson text: "${resp}"
                        PR_ID = respObj.number
                        if (PR_ID != null) {
                            echo 'PR created.'
                        } else {
                            echo "PR response: ${resp}"
                            error 'Unable to create PR!'
                        }
                    }
                }
                script {
                    echo 'Waiting for approval...'
                    def approval = input message: 'Approve PR',
                        ok: 'Yes',
                        parameters: [
                            string(defaultValue: '',  description: 'GitHub username', name: 'GHUSER'),
                            password(defaultValue: '', description: 'GitHub password', name: 'GHPASS')
                        ],
                        submitterParameter: 'USER'
                    def merge = JsonOutput.toJson([commit_title:"Merge ${TENANT} configuration."])
                    resp = sh (
                        script: "curl -s -o - -i -w \"%{http_code}\" -X PUT -d ${merge} ${GITHUB_API_URL}/pulls/${PR_ID}/merge -u ${approval['GHUSER']}:${approval['GHPASS']} | tail -1",
                        returnStdout: true
                    ).trim()
                }
            }
        }
    }
    post {
        always {
            script {
                if (fileExists("${TENANT_BRANCH}")) {
                    dir ("${TENANT_BRANCH}") {
                        sh "git push origin --delete \"${TENANT_BRANCH}\""
                        deleteDir()
                    }
                }
            }
        }
    }
}