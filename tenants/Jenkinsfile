import groovy.json.JsonOutput

pipeline {
    options {
        buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
    }
    agent any
    parameters {
        string(name: 'Tenant Name', defaultValue: '', description: 'Name of tenant to create')
        choice(name: 'Region', choices: ['us-east-1', 'us-west-2'], description: 'Region to deploy tenant')
        choice(name: 'Environment', choices: ['prod', 'stage'], description: 'Environment to deploy tenant')
    }

    stages {
        stage("Validate parameters") {
            steps {
                script {
                    if (params['Tenant Name'] == '') {
                        error 'Invalid tenant name'
                    }
                }
            }
        }
        stage("Create tenant branch") {
            steps {
                withCredentials([usernamePassword(
                    credentialsId: 'pgombola-token',
                    usernameVariable: 'USERNAME',
                    passwordVariable: 'PASSWORD',)]) {
                    script {
                        def tenantBranch = 'tenant-'+params['Tenant Name']
                        echo "Creating branch ${tenantBranch}"
                        def create = JsonOutput.toJson([ref: "refs/heads/${tenantBranch}", sha: "${GIT_COMMIT}"]).replace("\"", "\\\"")
                        created = sh (
                            script: "curl -s -o - -i -w \"%{http_code}\" -X POST -d ${create} https://api.github.com/repos/pgombola/k8s-jenkins/git/refs -u $USERNAME:$PASSWORD | tail -1",
                            returnStdout: true
                        ).trim() == '201'
                        echo "Branch created: ${created}"
                        if (!created) {
                            error 'Error creating branch'
                        }
                    }
                }
            }
        }
        stage("Configure tenant") {
            steps {
                script {
                    def tenant = params['Tenant Name']
                    echo "Checking out ${tenant}..."
                    dir("tenant-${tenant}") {
                        git (
                            url: "${GIT_URL}",
                            credentialsId: 'pgombola-token',
                            branch: "tenant-${tenant}"
                        )
                        sh "./create-tenant.sh ${tenant}"
                        sh "git add . && git commit -m \"Added tenant ${tenant}\" && git push origin tenant-${tenant}"
                    }
                }
            }
        }
        stage("Create PR") {
            steps {
                echo 'creating pr...'
            }
        }
    }
    post {
        cleanup {
            cleanWs()
        }
    }
}